#! /usr/bin/env ruby
# encoding: utf-8

require 'optparse'
require 'uri'
require 'open-uri'
require 'nokogiri'

SEARCH_URI = "http://www.geonames.org/search.html?q="

COLUMNS_PER_RESULT_ROW = 6

feature_classes = {
	'A' => 'Administrative', 
	'P' => 'Populated place', 
	'H' => 'Hydrographic', 
	'T' => 'Hypsographic', 
	'V' => 'Vegetation', 
	'L' => 'Locality or area', 
	'S' => 'Spot feature', 
	'R' => 'Road & rails', 
	'U' => 'Undersea ',
}

continents = {
	'EU' => 'Europe', 
	'AF' => 'Africa', 
	'AS' => 'Asia', 
	'OC' => 'Oceania', 
	'NA' => 'N. America', 
	'SA' => 'S. America', 
}

countries = {
	'AF' => 'Afghanistan',
	'AL' => 'Albania',
	'DZ' => 'Algeria',
	'AS' => 'American Samoa',
	'AD' => 'Andorra',
	'AO' => 'Angola',
	'AI' => 'Anguilla',
	'AQ' => 'Antarctica',
	'AG' => 'Antigua and Barbuda',
	'AR' => 'Argentina',
	'AM' => 'Armenia',
	'AW' => 'Aruba',
	'AU' => 'Australia',
	'AT' => 'Austria',
	'AZ' => 'Azerbaijan',
	'BS' => 'Bahamas',
	'BH' => 'Bahrain',
	'BD' => 'Bangladesh',
	'BB' => 'Barbados',
	'BY' => 'Belarus',
	'BE' => 'Belgium',
	'BZ' => 'Belize',
	'BJ' => 'Benin',
	'BM' => 'Bermuda',
	'BT' => 'Bhutan',
	'BO' => 'Bolivia',
	'BQ' => 'Bonaire, Saint Eustatius and Saba',
	'BA' => 'Bosnia and Herzegovina',
	'BW' => 'Botswana',
	'BV' => 'Bouvet Island',
	'BR' => 'Brazil',
	'IO' => 'British Indian Ocean Territory',
	'VG' => 'British Virgin Islands',
	'BN' => 'Brunei',
	'BG' => 'Bulgaria',
	'BF' => 'Burkina Faso',
	'BI' => 'Burundi',
	'KH' => 'Cambodia',
	'CM' => 'Cameroon',
	'CA' => 'Canada',
	'CV' => 'Cape Verde',
	'KY' => 'Cayman Islands',
	'CF' => 'Central African Republic',
	'TD' => 'Chad',
	'CL' => 'Chile',
	'CN' => 'China',
	'CX' => 'Christmas Island',
	'CC' => 'Cocos [Keeling] Islands',
	'CO' => 'Colombia',
	'KM' => 'Comoros',
	'CD' => 'Congo [DRC]',
	'CG' => 'Congo [Republic]',
	'CK' => 'Cook Islands',
	'CR' => 'Costa Rica',
	'HR' => 'Croatia',
	'CU' => 'Cuba',
	'CW' => 'Curacao',
	'CY' => 'Cyprus',
	'CZ' => 'Czech Republic',
	'DK' => 'Denmark',
	'DJ' => 'Djibouti',
	'DM' => 'Dominica',
	'DO' => 'Dominican Republic',
	'TL' => 'East Timor',
	'EC' => 'Ecuador',
	'EG' => 'Egypt',
	'SV' => 'El Salvador',
	'GQ' => 'Equatorial Guinea',
	'ER' => 'Eritrea',
	'EE' => 'Estonia',
	'ET' => 'Ethiopia',
	'FK' => 'Falkland Islands',
	'FO' => 'Faroe Islands',
	'FJ' => 'Fiji',
	'FI' => 'Finland',
	'FR' => 'France',
	'GF' => 'French Guiana',
	'PF' => 'French Polynesia',
	'TF' => 'French Southern Territories',
	'GA' => 'Gabon',
	'GM' => 'Gambia',
	'GE' => 'Georgia',
	'DE' => 'Germany',
	'GH' => 'Ghana',
	'GI' => 'Gibraltar',
	'GR' => 'Greece',
	'GL' => 'Greenland',
	'GD' => 'Grenada',
	'GP' => 'Guadeloupe',
	'GU' => 'Guam',
	'GT' => 'Guatemala',
	'GG' => 'Guernsey',
	'GN' => 'Guinea',
	'GW' => 'Guinea-Bissau',
	'GY' => 'Guyana',
	'HT' => 'Haiti',
	'HM' => 'Heard Island and McDonald Islands',
	'HN' => 'Honduras',
	'HK' => 'Hong Kong',
	'HU' => 'Hungary',
	'IS' => 'Iceland',
	'IN' => 'India',
	'ID' => 'Indonesia',
	'IR' => 'Iran',
	'IQ' => 'Iraq',
	'IE' => 'Ireland',
	'IM' => 'Isle of Man',
	'IL' => 'Israel',
	'IT' => 'Italy',
	'CI' => 'Ivory Coast',
	'JM' => 'Jamaica',
	'JP' => 'Japan',
	'JE' => 'Jersey',
	'JO' => 'Jordan',
	'KZ' => 'Kazakhstan',
	'KE' => 'Kenya',
	'KI' => 'Kiribati',
	'XK' => 'Kosovo',
	'KW' => 'Kuwait',
	'KG' => 'Kyrgyzstan',
	'LA' => 'Laos',
	'LV' => 'Latvia',
	'LB' => 'Lebanon',
	'LS' => 'Lesotho',
	'LR' => 'Liberia',
	'LY' => 'Libya',
	'LI' => 'Liechtenstein',
	'LT' => 'Lithuania',
	'LU' => 'Luxembourg',
	'MO' => 'Macau',
	'MK' => 'Macedonia',
	'MG' => 'Madagascar',
	'MW' => 'Malawi',
	'MY' => 'Malaysia',
	'MV' => 'Maldives',
	'ML' => 'Mali',
	'MT' => 'Malta',
	'MH' => 'Marshall Islands',
	'MQ' => 'Martinique',
	'MR' => 'Mauritania',
	'MU' => 'Mauritius',
	'YT' => 'Mayotte',
	'MX' => 'Mexico',
	'FM' => 'Micronesia',
	'MD' => 'Moldova',
	'MC' => 'Monaco',
	'MN' => 'Mongolia',
	'ME' => 'Montenegro',
	'MS' => 'Montserrat',
	'MA' => 'Morocco',
	'MZ' => 'Mozambique',
	'MM' => 'Myanmar [Burma]',
	'NA' => 'Namibia',
	'NR' => 'Nauru',
	'NP' => 'Nepal',
	'NL' => 'Netherlands',
	'AN' => 'Netherlands Antilles',
	'NC' => 'New Caledonia',
	'NZ' => 'New Zealand',
	'NI' => 'Nicaragua',
	'NE' => 'Niger',
	'NG' => 'Nigeria',
	'NU' => 'Niue',
	'NF' => 'Norfolk Island',
	'KP' => 'North Korea',
	'MP' => 'Northern Mariana Islands',
	'NO' => 'Norway',
	'OM' => 'Oman',
	'PK' => 'Pakistan',
	'PW' => 'Palau',
	'PS' => 'Palestinian Territories',
	'PA' => 'Panama',
	'PG' => 'Papua New Guinea',
	'PY' => 'Paraguay',
	'PE' => 'Peru',
	'PH' => 'Philippines',
	'PN' => 'Pitcairn Islands',
	'PL' => 'Poland',
	'PT' => 'Portugal',
	'PR' => 'Puerto Rico',
	'QA' => 'Qatar',
	'RO' => 'Romania',
	'RU' => 'Russia',
	'RW' => 'Rwanda',
	'RE' => 'Réunion',
	'BL' => 'Saint Barthélemy',
	'SH' => 'Saint Helena',
	'KN' => 'Saint Kitts and Nevis',
	'LC' => 'Saint Lucia',
	'MF' => 'Saint Martin',
	'PM' => 'Saint Pierre and Miquelon',
	'VC' => 'Saint Vincent and the Grenadines',
	'WS' => 'Samoa',
	'SM' => 'San Marino',
	'SA' => 'Saudi Arabia',
	'SN' => 'Senegal',
	'RS' => 'Serbia',
	'CS' => 'Serbia and Montenegro',
	'SC' => 'Seychelles',
	'SL' => 'Sierra Leone',
	'SG' => 'Singapore',
	'SX' => 'Sint Maarten',
	'SK' => 'Slovakia',
	'SI' => 'Slovenia',
	'SB' => 'Solomon Islands',
	'SO' => 'Somalia',
	'ZA' => 'South Africa',
	'GS' => 'South Georgia and the South Sandwich Islands',
	'KR' => 'South Korea',
	'ES' => 'Spain',
	'LK' => 'Sri Lanka',
	'SD' => 'Sudan',
	'SR' => 'Suriname',
	'SJ' => 'Svalbard and Jan Mayen',
	'SZ' => 'Swaziland',
	'SE' => 'Sweden',
	'CH' => 'Switzerland',
	'SY' => 'Syria',
	'ST' => 'São Tomé and Príncipe',
	'TW' => 'Taiwan',
	'TJ' => 'Tajikistan',
	'TZ' => 'Tanzania',
	'TH' => 'Thailand',
	'TG' => 'Togo',
	'TK' => 'Tokelau',
	'TO' => 'Tonga',
	'TT' => 'Trinidad and Tobago',
	'TN' => 'Tunisia',
	'TR' => 'Turkey',
	'TM' => 'Turkmenistan',
	'TC' => 'Turks and Caicos Islands',
	'TV' => 'Tuvalu',
	'UM' => 'U.S. Minor Outlying Islands',
	'VI' => 'U.S. Virgin Islands',
	'UG' => 'Uganda',
	'UA' => 'Ukraine',
	'AE' => 'United Arab Emirates',
	'GB' => 'United Kingdom',
	'US' => 'United States',
	'UY' => 'Uruguay',
	'UZ' => 'Uzbekistan',
	'VU' => 'Vanuatu',
	'VA' => 'Vatican City',
	'VE' => 'Venezuela',
	'VN' => 'Vietnam',
	'WF' => 'Wallis and Futuna',
	'EH' => 'Western Sahara',
	'YE' => 'Yemen',
	'ZM' => 'Zambia',
	'ZW' => 'Zimbabwe',
	'AX' => 'Åland Islands',
}


# This hash will hold all of the options
# parsed from the command-line by
# OptionParser.
options = {}

optparse = OptionParser.new do |opts|
  # Set a banner, displayed at the top
  # of the help screen.

  opts.banner = "Usage: gnlookup.rb [options] toponym1 toponym2 ..."

  opts.separator ""
  opts.separator "If toponyms are not supplied on command line, gnlookup will run interactively"

  opts.separator ""
  opts.separator "Specific options:"

  # Define the options, and what they do

  options[:verbose] = false
  opts.on( '-v', '--verbose', 'Output more information' ) do
    options[:verbose] = true
  end

  options[:max] = 50
  opts.on( '-m integer', '--max-results=integer', 'Limit number of results returned' ) do |max|
    options[:max] = max.to_i - 1
  end

	# FEATURE CLASS
	
  options[:feature] = nil
  opts.on( '--feature <code>', 
																'Choose feature class', 
																'  A = Administrative (country, state, region,...)  ', 
																'  P = Populated place (city, village,...)', 
																'  H = Hydrographic (stream, lake,...)', 
																'  T = Hypsographic (mountain,hill,rock,...)', 
																'  V = Vegetation (forest,heath,..)', 
																'  L = Locality or area (parks,area, ...)', 
																'  S = Spot feature (spot, building, farm)', 
																'  R = Road & rails (road, street, highway, railroad )', 
																'  U = Undersea', 
  ) do |feature|
    options[:feature] = feature
  end
	
	# CONTINENT
	
  options[:continent] = nil
  opts.on( '-n', '--continent <code>',	continents.keys, 'Choose continent', 
															'  EU = Europe', 
															'  AF = Africa', 
															'  AS = Asia', 
															'  OC = Oceania', 
															'  NA = N. America', 
															'  SA = S. America',
	) do |continent|
    options[:continent] = continent
  end

	# COUNTRY
	
  options[:country] = nil
  opts.on( '-c', '--country <code>',	'Choose country (see --list-countries for full list)', countries.keys
	) do |country|
    options[:country] = country
  end

  # # List of arguments.
  # opts.on("--list x,y,z", Array, "Example 'list' of arguments") do |list|
  #   options.list = list
  # end

  # This displays a help screen of countries and codes
  opts.on( '-l', '--list-countries', 'Display a list of country names and codes' ) do
		puts "Listing countries:\n\n"
    countries.each do |k, v|
			puts "  #{k} = #{v}"
		end
		puts
  end

  # This displays the help screen, all programs are
  # assumed to have this option.
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

# Parse the command-line. Remember there are two forms
# of the parse method. The 'parse' method simply parses
# ARGV, while the 'parse!' method parses ARGV and removes
# any options found there, as well as any parameters for
# the options. What's left is the list of arguments to process.
optparse.parse!

puts "Being verbose" if options[:verbose]
puts "Restricting to feature class: #{feature_classes[options[:feature]]}" if options[:feature] and options[:verbose]
puts "Restricting to continent: #{countries[options[:country]]}" if options[:country] and options[:verbose]
puts "Restricting to country: #{continents[options[:continent]]}" if options[:continent] and options[:verbose]

def gn_lookup(toponym, options)
	uri = "#{SEARCH_URI}#{URI.escape(toponym)}"
	if options[:country]
		uri << "&country=#{options[:country]}"
	end
	if options[:feature]
		uri << "&featureClass=#{options[:feature]}"
	end
	if options[:continent]
		uri << "&continentCode=#{options[:continent]}"
	end
	puts uri if options[:verbose]

	doc = Nokogiri::HTML(open(uri), nil, 'UTF-8')
	# puts doc.inspect

	# if we have a result set
	if doc.css('table.restable').size > 0

		# remove hit count
		doc.css('table.restable tr').first.unlink 

		# remove column headers
		doc.css('table.restable tr').first.unlink 

		# loop over remaining rows
		doc.css('table.restable tr').each_with_index do |tr, i| 
			if tr.children.size == COLUMNS_PER_RESULT_ROW
				next if i > options[:max]
				name 		= tr.css('td')[1].css('a')[0].content
				aliases = tr.css('td')[1].css('small')[0].content
				lon 		= tr.css('td')[1].css('.longitude')[0].content
				lat 		= tr.css('td')[1].css('.latitude')[0].content
				hier		= tr.css('td')[2].content.strip
				hiersmall 	= tr.css('td')[2].css('small').text
				hier = hier.sub(hiersmall, ", #{hiersmall}") unless hiersmall == ''
				feature	= (tr.css('td')[3].children.first) ? tr.css('td')[3].children.first.content : ''

				columns = [toponym, name, feature, lon, lat, aliases, hier, 'gnlookup']
				puts columns.join("\t")
				$stdout.flush
			end

		end # tr loop

	else
		puts toponym
	end # if results

end

if ARGV.length > 0
	# passed in directly on cmd line
	ARGV.each do |arg|
		gn_lookup(arg, options)
	end
elsif defined?(DATA) and !DATA.eof?
	# at the end of this file, probably for testing
	DATA.each_line do |line|
		line.chomp!
		gn_lookup(line, options)
	end
else 
	# via standard input, either interactively or a pipe
	STDIN.each_line do |line|
		line.chomp!
		gn_lookup(line, options)
	end
end

# __END__
# Abu Dhabi	city
# Agra	city
# Ahmedabad/ Ahmadabad	city
# Alcaraz	city
# Aleppo	city
# Alexandria	city
# Algiers	city
# Amman	city
# Amritsar	city
# Arbill	city
# Ardabil	city
# Aurangabad	city
# Afghanistan	country
# Albania	country
# Algeria	country
# Armenia	country
# Azerbaijan	country
# Anatolia	region
# Andalusia 	region
# Arabian peninsula	region
# Amu Darya (Oxus)	river
# Arabian Sea	water, sea
# Aral Sea	water, sea
# Atlantic Ocean	water, sea
